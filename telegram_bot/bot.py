import logging
import os
import sys

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ sys.path –¥–ª—è imghdr
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'loyalty_system.settings')
django.setup()

from loyalty.models import Customer, Purchase
from telegram_bot.models import DiscountCode
from telegram_bot.admin_config import is_admin
from checkbox_integration.api import get_customer_level, calculate_discount
from django.utils import timezone
from django.db import models
import string
import random
import pytz

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞ (–∑–±–µ—Ä—ñ–≥–∞–π—Ç–µ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ)
from django.conf import settings

TOKEN = settings.TELEGRAM_BOT_TOKEN

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —á–∞—Å—É –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
def format_ukraine_time(datetime_obj):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î UTC —á–∞—Å –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î"""
    ukraine_tz = pytz.timezone('Europe/Kiev')
    if datetime_obj.tzinfo is None:
        # –Ø–∫—â–æ —á–∞—Å –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É, –≤–≤–∞–∂–∞—î–º–æ –π–æ–≥–æ UTC
        utc_time = pytz.utc.localize(datetime_obj)
    else:
        utc_time = datetime_obj.astimezone(pytz.utc)
    
    ukraine_time = utc_time.astimezone(ukraine_tz)
    return ukraine_time.strftime('%d.%m.%Y %H:%M')

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    try:
        customer = Customer.objects.get(telegram_id=str(user.id))
        level, discount = get_customer_level(customer.total_spent)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∏–∂–∫—É –∫–ª—ñ—î–Ω—Ç–∞, —è–∫—â–æ –≤–æ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è
        if customer.current_discount != discount:
            customer.current_discount = discount
            customer.save()
        
        keyboard = [
            [InlineKeyboardButton("üõí –®–≤–∏–¥–∫–∞ –ø–æ–∫—É–ø–∫–∞", callback_data="oneclick")],
            [InlineKeyboardButton("üí∞ –ú–æ—è –∑–Ω–∏–∂–∫–∞", callback_data="discount")],
            [InlineKeyboardButton("üìä –†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫", callback_data="levels")],
            [InlineKeyboardButton("üìã –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="profile_settings")],
            [InlineKeyboardButton("üìñ –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            f"–í—ñ—Ç–∞—î–º–æ, {customer.first_name}! üëã\n\n"
            f"üíé –í–∞—à —Ä—ñ–≤–µ–Ω—å: {level}\n"
            f"üí∞ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {discount}%\n"
            f"üõí –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {customer.total_spent} –≥—Ä–Ω",
            reply_markup=reply_markup
        )
    except Customer.DoesNotExist:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")],
            [InlineKeyboardButton("üìä –†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫", callback_data="levels")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "üéâ **–í—ñ—Ç–∞—î–º–æ –≤ —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É!**\n\n"
            "üíé –û—Ç—Ä–∏–º—É–π—Ç–µ –∑–Ω–∏–∂–∫–∏ –≤—ñ–¥ 1% –¥–æ 10% –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—É–º–∏ –ø–æ–∫—É–ø–æ–∫\n"
            "üõí –ù–∞–∫–æ–ø–∏—á—É–π—Ç–µ –±–æ–Ω—É—Å–∏ –∑ –∫–æ–∂–Ω–æ—é –ø–æ–∫—É–ø–∫–æ—é\n"
            "üìà –ü—ñ–¥–≤–∏—â—É–π—Ç–µ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –±—ñ–ª—å—à–∏—Ö –∑–Ω–∏–∂–æ–∫\n\n"
            "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ! üëá",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

def register_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    keyboard = [
        [KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)],
        [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    query.message.reply_text(
        text="üì± –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
             "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º –∑ –≤–∞—à–æ–≥–æ Telegram –∞–∫–∞—É–Ω—Ç—É:\n\n"
             "üîí –í–∞—à—ñ –¥–∞–Ω—ñ –∑–∞—Ö–∏—â–µ–Ω—ñ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–Ω–∏–∂–æ–∫.",
        reply_markup=reply_markup
    )
    context.user_data['registration_step'] = 'phone_consent'

def handle_message(update: Update, context: CallbackContext):
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    if update.message.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        context.user_data.clear()
        start(update, context)
        return
    
    # –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    if update.message.contact and 'registration_step' in context.user_data and context.user_data['registration_step'] == 'phone_consent':
        contact = update.message.contact
        phone = contact.phone_number
        
        # –î–æ–¥–∞—î–º–æ + —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if not phone.startswith('+'):
            phone = '+' + phone
            
        context.user_data['phone'] = phone
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –∑ –∫–æ–Ω—Ç–∞–∫—Ç—É
        first_name = contact.first_name if contact.first_name else ""
        last_name = contact.last_name if contact.last_name else ""
        
        context.user_data['name'] = first_name
        context.user_data['lastname'] = last_name
        
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –∫–æ–Ω—Ç–∞–∫—Ç—É
        from telegram import ReplyKeyboardRemove
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –Ø–∫—â–æ —î —ñ–º'—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ñ, –æ–¥—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
        if first_name:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            user = update.effective_user
            new_customer = Customer(
                telegram_id=str(user.id),
                first_name=first_name,
                last_name=last_name,
                phone_number=phone,
                current_discount=1  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∑–Ω–∏–∂–∫–∞ 1% –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
            )
            new_customer.save()
            
            # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            context.user_data.clear()
            
            update.message.reply_text(
                f"üéâ –í—ñ—Ç–∞—î–º–æ, {first_name}!\n\n"
                f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä: {phone}\n"
                f"üë§ –Ü–º'—è: {first_name}\n"
                f"üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: {last_name if last_name else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
                "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞.\n\n"
                f"üí∞ –í–∞—à —Ä—ñ–≤–µ–Ω—å –∑–Ω–∏–∂–∫–∏: Starter ({new_customer.current_discount}%)\n"
                "üõí –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–®–≤–∏–¥–∫–∞ –ø–æ–∫—É–ø–∫–∞' –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫.",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            start(update, context)
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–º–µ–Ω—ñ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ñ, –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏
            context.user_data['registration_step'] = 'name'
            
            update.message.reply_text(
                f"‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n"
                "–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            
            update.message.reply_text(
                "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
                reply_markup=reply_markup
            )
        return
    
    if 'registration_step' in context.user_data:
        if context.user_data['registration_step'] == 'phone_consent':
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É
            keyboard = [
                [KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)],
                [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            update.message.reply_text(
                "üì± –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É\" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∑ –≤–∞—à–æ–≥–æ Telegram –∞–∫–∞—É–Ω—Ç—É.",
                reply_markup=reply_markup
            )
            return
        
        elif context.user_data['registration_step'] == 'name':
            # –û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ
            name = update.message.text.strip()
            if not name:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                update.message.reply_text(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è",
                    reply_markup=reply_markup
                )
                return
            
            context.user_data['name'] = name
            context.user_data['registration_step'] = 'last_name'
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(
                "–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)",
                reply_markup=reply_markup
            )
        
        elif context.user_data['registration_step'] == 'last_name':
            # –û–±—Ä–æ–±–∫–∞ –ø—Ä—ñ–∑–≤–∏—â–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            last_name = update.message.text.strip()
            if update.message.text == '/skip':
                last_name = None
            
            user = update.effective_user
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            customer = Customer(
                telegram_id=str(user.id),
                first_name=context.user_data['name'],
                last_name=last_name,
                phone_number=context.user_data['phone'],
                current_discount=1,  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∑–Ω–∏–∂–∫–∞ 1% –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
                total_spent=0
            )
            customer.save()
            
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            context.user_data.clear()
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(
                f"üéâ –í—ñ—Ç–∞—î–º–æ, {customer.first_name}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n\n"
                f"üíé –í–∞—à —Ä—ñ–≤–µ–Ω—å: Starter\n"
                f"üí∞ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {customer.current_discount}%\n\n"
                f"–†–æ–±—ñ—Ç—å –ø–æ–∫—É–ø–∫–∏ —Ç–∞ –ø—ñ–¥–≤–∏—â—É–π—Ç–µ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—ñ–ª—å—à–∏—Ö –∑–Ω–∏–∂–æ–∫!",
                reply_markup=reply_markup
            )
    
    # –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –¥—ñ–π
    if 'admin_action' in context.user_data:
        admin_action = context.user_data['admin_action']
        
        if admin_action == 'search_user':
            # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            search_query = update.message.text.strip()
            
            # –ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —ñ–º'—è–º
            customers = Customer.objects.filter(
                models.Q(phone_number__icontains=search_query) |
                models.Q(first_name__icontains=search_query) |
                models.Q(last_name__icontains=search_query)
            )[:10]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            
            keyboard = []
            
            if customers.exists():
                for customer in customers:
                    keyboard.append([InlineKeyboardButton(
                        f"üë§ {customer.first_name} {customer.last_name or ''} ({customer.phone_number})",
                        callback_data=f"admin_user_details_{customer.id}"
                    )])
            
            keyboard.extend([
                [InlineKeyboardButton("üîç –ù–æ–≤–∏–π –ø–æ—à—É–∫", callback_data="admin_search_user")],
                [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_user_management")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if customers.exists():
                search_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{search_query}':**\n\n–ó–Ω–∞–π–¥–µ–Ω–æ {customers.count()} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π:"
            else:
                search_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{search_query}':**\n\n‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö."
            
            update.message.reply_text(search_text, reply_markup=reply_markup, parse_mode='Markdown')
            context.user_data.pop('admin_action', None)
            return
        
        elif admin_action.startswith('edit_'):
            # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            field_type = admin_action.split('_')[1]  # name, lastname, phone, spent
            user_id = context.user_data.get('edit_user_id')
            
            if not user_id:
                return
            
            try:
                customer = Customer.objects.get(id=user_id)
                new_value = update.message.text.strip()
                
                if field_type == 'name':
                    if not new_value:
                        update.message.reply_text("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
                        return
                    customer.first_name = new_value
                    success_msg = f"‚úÖ –Ü–º'—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_value}'"
                    
                elif field_type == 'lastname':
                    customer.last_name = new_value if new_value else None
                    success_msg = f"‚úÖ –ü—Ä—ñ–∑–≤–∏—â–µ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_value}'"
                    
                elif field_type == 'phone':
                    if not new_value.startswith('+380') or len(new_value) != 13:
                        update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX")
                        return
                    customer.phone_number = new_value
                    success_msg = f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_value}'"
                    
                elif field_type == 'spent':
                    try:
                        spent_amount = float(new_value)
                        if spent_amount < 0:
                            update.message.reply_text("‚ùå –°—É–º–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é")
                            return
                        customer.total_spent = spent_amount
                        success_msg = f"‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {spent_amount:.2f} –≥—Ä–Ω"
                    except ValueError:
                        update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É (—á–∏—Å–ª–æ)")
                        return
                
                customer.save()
                
                keyboard = [
                    [InlineKeyboardButton("üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"admin_user_details_{user_id}")],
                    [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data=f"admin_edit_user_{user_id}")],
                    [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                update.message.reply_text(success_msg, reply_markup=reply_markup)
                
                # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
                context.user_data.pop('admin_action', None)
                context.user_data.pop('edit_user_id', None)
                
            except Customer.DoesNotExist:
                update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                context.user_data.pop('admin_action', None)
                context.user_data.pop('edit_user_id', None)
            
            return
    
    # –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∑–º—ñ–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—é –∫–ª—ñ—î–Ω—Ç–∞
    if 'profile_action' in context.user_data:
        profile_action = context.user_data['profile_action']
        customer_id = context.user_data.get('customer_id')
        
        if not customer_id:
            update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ")
            context.user_data.clear()
            return
        
        try:
            customer = Customer.objects.get(id=customer_id)
            
            if profile_action == 'change_phone' and update.message.contact:
                # –ó–º—ñ–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç
                contact = update.message.contact
                new_phone = contact.phone_number
                
                # –î–æ–¥–∞—î–º–æ + —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
                if not new_phone.startswith('+'):
                    new_phone = '+' + new_phone
                
                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                if len(new_phone) < 10 or len(new_phone) > 15:
                    update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    return
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ü–µ–π –Ω–æ–º–µ—Ä —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
                existing_customer = Customer.objects.filter(phone_number=new_phone).exclude(id=customer.id).first()
                if existing_customer:
                    update.message.reply_text("‚ùå –¶–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                    return
                
                old_phone = customer.phone_number
                customer.phone_number = new_phone
                customer.save()
                
                keyboard = [
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="profile_settings")],
                    [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                from telegram import ReplyKeyboardRemove
                update.message.reply_text(
                    f"‚úÖ **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!**\n\n"
                    f"–°—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä: {old_phone}\n"
                    f"–ù–æ–≤–∏–π –Ω–æ–º–µ—Ä: {new_phone}",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='Markdown'
                )
                
                update.message.reply_text(
                    "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?",
                    reply_markup=reply_markup
                )
                
                # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
                context.user_data.pop('profile_action', None)
                context.user_data.pop('customer_id', None)
                
            elif profile_action == 'change_name' and update.message.text and update.message.text != "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
                # –ó–º—ñ–Ω–∞ —ñ–º–µ–Ω—ñ
                new_name = update.message.text.strip()
                
                if len(new_name) < 1 or len(new_name) > 50:
                    update.message.reply_text("‚ùå –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 1 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                    return
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —ñ–º'—è –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏
                import re
                if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ\s\-']+$", new_name):
                    update.message.reply_text("‚ùå –Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                    return
                
                old_name = customer.first_name
                customer.first_name = new_name
                customer.save()
                
                keyboard = [
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="profile_settings")],
                    [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                from telegram import ReplyKeyboardRemove
                update.message.reply_text(
                    f"‚úÖ **–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!**\n\n"
                    f"–°—Ç–∞—Ä–µ —ñ–º'—è: {old_name}\n"
                    f"–ù–æ–≤–µ —ñ–º'—è: {new_name}",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='Markdown'
                )
                
                update.message.reply_text(
                    "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?",
                    reply_markup=reply_markup
                )
                
                # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
                context.user_data.pop('profile_action', None)
                context.user_data.pop('customer_id', None)
                
            elif profile_action == 'change_lastname' and update.message.text and update.message.text != "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
                # –ó–º—ñ–Ω–∞ –ø—Ä—ñ–∑–≤–∏—â–∞
                new_lastname = update.message.text.strip()
                
                if len(new_lastname) > 50:
                    update.message.reply_text("‚ùå –ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 50 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                    return
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä—ñ–∑–≤–∏—â–µ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏ (—è–∫—â–æ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î)
                if new_lastname and not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ\s\-']+$", new_lastname):
                    update.message.reply_text("‚ùå –ü—Ä—ñ–∑–≤–∏—â–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                    return
                
                old_lastname = customer.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'
                customer.last_name = new_lastname if new_lastname else None
                customer.save()
                
                keyboard = [
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="profile_settings")],
                    [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                from telegram import ReplyKeyboardRemove
                update.message.reply_text(
                    f"‚úÖ **–ü—Ä—ñ–∑–≤–∏—â–µ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!**\n\n"
                    f"–°—Ç–∞—Ä–µ –ø—Ä—ñ–∑–≤–∏—â–µ: {old_lastname}\n"
                    f"–ù–æ–≤–µ –ø—Ä—ñ–∑–≤–∏—â–µ: {new_lastname or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='Markdown'
                )
                
                update.message.reply_text(
                    "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?",
                    reply_markup=reply_markup
                )
                
                # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
                context.user_data.pop('profile_action', None)
                context.user_data.pop('customer_id', None)
                
        except Customer.DoesNotExist:
            update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            context.user_data.clear()
        
        return

def skip_command(update: Update, context: CallbackContext):
    if 'registration_step' in context.user_data and context.user_data['registration_step'] == 'last_name':
        user = update.effective_user
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –±–µ–∑ –ø—Ä—ñ–∑–≤–∏—â–∞
        customer = Customer(
            telegram_id=str(user.id),
            first_name=context.user_data['name'],
            last_name=None,
            phone_number=context.user_data['phone'],
            current_discount=1,  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∑–Ω–∏–∂–∫–∞ 1% –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
            total_spent=0
        )
        customer.save()
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        context.user_data.clear()
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            f"üéâ –í—ñ—Ç–∞—î–º–æ, {customer.first_name}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n\n"
            f"üíé –í–∞—à —Ä—ñ–≤–µ–Ω—å: Starter\n"
            f"üí∞ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {customer.current_discount}%\n\n"
            f"–†–æ–±—ñ—Ç—å –ø–æ–∫—É–ø–∫–∏ —Ç–∞ –ø—ñ–¥–≤–∏—â—É–π—Ç–µ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—ñ–ª—å—à–∏—Ö –∑–Ω–∏–∂–æ–∫!",
            reply_markup=reply_markup
        )

def my_discount(update: Update, context: CallbackContext):
    user = update.effective_user
    
    try:
        customer = Customer.objects.get(telegram_id=str(user.id))
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∫–ª—ñ—î–Ω—Ç–∞
        level, discount = get_customer_level(customer.total_spent)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∏–∂–∫—É –∫–ª—ñ—î–Ω—Ç–∞, —è–∫—â–æ –≤–æ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è
        if customer.current_discount != discount:
            customer.current_discount = discount
            customer.save()
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            f"üíé –í–∞—à —Ä—ñ–≤–µ–Ω—å: {level}\n"
            f"üí∞ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {discount}%\n"
            f"üõí –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {customer.total_spent} –≥—Ä–Ω",
            reply_markup=reply_markup
        )
    except Customer.DoesNotExist:
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n"
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.",
            reply_markup=reply_markup
        )

def show_discount_levels(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —Ä—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫"""
    keyboard = [
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    levels_text = (
        "üìä **–†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫:**\n\n"
        "üîπ **Starter** (0 - 1 999 –≥—Ä–Ω) - 1%\n"
        "üî∏ **Regular** (2 000 - 4 999 –≥—Ä–Ω) - 3%\n"
        "üî∏ **Pro** (5 000 - 9 999 –≥—Ä–Ω) - 5%\n"
        "üî∂ **Elite** (10 000 - 19 999 –≥—Ä–Ω) - 7%\n"
        "üíé **VIP** (20 000 –≥—Ä–Ω —ñ –±—ñ–ª—å—à–µ) - 10%\n\n"
        "–í–∞—à —Ä—ñ–≤–µ–Ω—å –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∑–∞–≥–∞–ª—å–Ω–æ—é —Å—É–º–æ—é –≤—Å—ñ—Ö –ø–æ–∫—É–ø–æ–∫!"
    )
    
    update.message.reply_text(levels_text, reply_markup=reply_markup, parse_mode='Markdown')
def one_click_process(update: Update, context: CallbackContext):
    user = update.effective_user
    
    try:
        customer = Customer.objects.get(telegram_id=str(user.id))
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è –∫–∞—Å–∏—Ä–∞
        import random
        import string
        unique_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        
        update.message.reply_text(
            f"‚úÖ –í–∞—à –∫–æ–¥ –¥–ª—è –∫–∞—Å–∏—Ä–∞: {unique_code}\n\n"
            f"–ü–æ–∫–∞–∂—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –∫–∞—Å–∏—Ä—É –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∞—à–æ—ó –∑–Ω–∏–∂–∫–∏ {customer.current_discount}%\n\n"
            f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∞—à–∞ –∑–Ω–∏–∂–∫–∞ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞."
        )
    except Customer.DoesNotExist:
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n"
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.",
            reply_markup=reply_markup
        )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == "register":
        register_callback(update, context)
    elif query.data == "main_menu":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        user = update.effective_user
        try:
            customer = Customer.objects.get(telegram_id=str(user.id))
            level, discount = get_customer_level(customer.total_spent)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∏–∂–∫—É –∫–ª—ñ—î–Ω—Ç–∞, —è–∫—â–æ –≤–æ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è
            if customer.current_discount != discount:
                customer.current_discount = discount
                customer.save()
            
            keyboard = [
                [InlineKeyboardButton("üõí –®–≤–∏–¥–∫–∞ –ø–æ–∫—É–ø–∫–∞", callback_data="oneclick")],
                [InlineKeyboardButton("üí∞ –ú–æ—è –∑–Ω–∏–∂–∫–∞", callback_data="discount")],
                [InlineKeyboardButton("üìä –†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫", callback_data="levels")],
                [InlineKeyboardButton("üìã –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.message.reply_text(
                f"–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†\n\n"
                f"üíé –í–∞—à —Ä—ñ–≤–µ–Ω—å: {level}\n"
                f"üí∞ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {discount}%\n"
                f"üõí –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {customer.total_spent} –≥—Ä–Ω",
                reply_markup=reply_markup
            )
        except Customer.DoesNotExist:
            keyboard = [
                [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")],
                [InlineKeyboardButton("üìä –†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫", callback_data="levels")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text(
                "–í—ñ—Ç–∞—î–º–æ –≤ —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É! üéâ\n\n"
                "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.",
                reply_markup=reply_markup
            )
    elif query.data == "levels":
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        levels_text = (
            "üìä **–†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫:**\n\n"
            "üîπ **Starter** (0 - 1 999 –≥—Ä–Ω) - 1%\n"
            "üî∏ **Regular** (2 000 - 4 999 –≥—Ä–Ω) - 3%\n"
            "üî∏ **Pro** (5 000 - 9 999 –≥—Ä–Ω) - 5%\n"
            "üî∂ **Elite** (10 000 - 19 999 –≥—Ä–Ω) - 7%\n"
            "üíé **VIP** (20 000 –≥—Ä–Ω —ñ –±—ñ–ª—å—à–µ) - 10%\n\n"
            "–í–∞—à —Ä—ñ–≤–µ–Ω—å –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∑–∞–≥–∞–ª—å–Ω–æ—é —Å—É–º–æ—é –≤—Å—ñ—Ö –ø–æ–∫—É–ø–æ–∫!"
        )
        
        query.message.reply_text(levels_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "help":
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ–ø–æ–º–æ–≥—É
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        help_text = (
            "üìñ **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "üöÄ **–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏:**\n"
            "‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É\n"
            "‚Ä¢ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫\n\n"
            "üíé **–†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫:**\n"
            "‚Ä¢ üîπ Starter (0-1999 –≥—Ä–Ω) - 1%\n"
            "‚Ä¢ üî∂ Regular (2000-4999 –≥—Ä–Ω) - 3%\n"
            "‚Ä¢ üî∂ Pro (5000-9999 –≥—Ä–Ω) - 5%\n"
            "‚Ä¢ üü° Elite (10000-19999 –≥—Ä–Ω) - 7%\n"
            "‚Ä¢ üíé VIP (20000+ –≥—Ä–Ω) - 10%\n\n"
            "üõí **–Ø–∫ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É:**\n"
            "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–®–≤–∏–¥–∫–∞ –ø–æ–∫—É–ø–∫–∞\"\n"
            "2. –ü–æ–∫–∞–∂—ñ—Ç—å –∫–æ–¥ –∫–∞—Å–∏—Ä—É\n"
            "3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –∑–Ω–∏–∂–∫—É!\n\n"
            "üîß **–ö–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - —Ü—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è\n"
            "‚Ä¢ /discount - –º–æ—è –∑–Ω–∏–∂–∫–∞\n"
            "‚Ä¢ /history - —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫\n"
            "‚Ä¢ /oneclick - —à–≤–∏–¥–∫–∞ –ø–æ–∫—É–ø–∫–∞"
        )
        
        query.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_stats":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏
        from telegram_bot.models import DiscountCode
        from django.utils import timezone
        
        total_customers = Customer.objects.count()
        total_purchases = Purchase.objects.count()
        active_codes = DiscountCode.objects.filter(is_used=False, expires_at__gt=timezone.now()).count()
        total_spent = sum(customer.total_spent for customer in Customer.objects.all())
        
        keyboard = [
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_customers}\n"
            f"üõí –í—Å—å–æ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}\n"
            f"üé´ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤: {active_codes}\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {total_spent:.2f} –≥—Ä–Ω"
        )
        
        query.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_customers":
        # –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
        customers = Customer.objects.order_by('-total_spent')[:10]
        
        keyboard = [
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        customers_text = "üë• **–¢–æ–ø-10 –∫–ª—ñ—î–Ω—Ç—ñ–≤:**\n\n"
        for i, customer in enumerate(customers, 1):
            level, discount = get_customer_level(customer.total_spent)
            customers_text += f"{i}. {customer.first_name} {customer.last_name}\n"
            customers_text += f"   üì± {customer.phone_number}\n"
            customers_text += f"   üíé {level} ({discount}%) - {customer.total_spent:.2f} –≥—Ä–Ω\n\n"
        
        query.message.reply_text(customers_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_codes":
        # –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏
        from telegram_bot.models import DiscountCode
        from django.utils import timezone
        
        active_codes = DiscountCode.objects.filter(
            is_used=False, 
            expires_at__gt=timezone.now()
        ).order_by('-created_at')[:10]
        
        keyboard = [
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        codes_text = "üé´ **–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏ –∑–Ω–∏–∂–æ–∫:**\n\n"
        for code in active_codes:
            codes_text += f"üîπ **{code.code}**\n"
            codes_text += f"   üë§ {code.customer.first_name} {code.customer.last_name}\n"
            codes_text += f"   ‚è∞ –î—ñ—î –¥–æ: {code.expires_at.strftime('%H:%M %d.%m.%Y')}\n\n"
        
        if not active_codes:
            codes_text += "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤"
        
        query.message.reply_text(codes_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_purchases":
        # –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏
        purchases = Purchase.objects.order_by('-purchase_date')[:10]
        
        keyboard = [
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        purchases_text = "üí∞ **–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏:**\n\n"
        for purchase in purchases:
            purchases_text += f"üõí {purchase.amount:.2f} –≥—Ä–Ω (–∑–Ω–∏–∂–∫–∞ {purchase.discount_applied}%)\n"
            purchases_text += f"   üë§ {purchase.customer.first_name} {purchase.customer.last_name}\n"
            purchases_text += f"   üìÖ {format_ukraine_time(purchase.purchase_date)}\n\n"
        
        if not purchases:
            purchases_text += "–ù–µ–º–∞—î –ø–æ–∫—É–ø–æ–∫"
        
        query.message.reply_text(purchases_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_analytics":
        # –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
        from datetime import datetime, timedelta
        from django.db.models import Count, Sum, Avg
        from django.utils import timezone
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
        last_month = timezone.now() - timedelta(days=30)
        monthly_customers = Customer.objects.filter(registration_date__gte=last_month).count()
        monthly_purchases = Purchase.objects.filter(purchase_date__gte=last_month).count()
        monthly_revenue = Purchase.objects.filter(purchase_date__gte=last_month).aggregate(Sum('amount'))['amount__sum'] or 0
        
        # –¢–æ–ø –∫–ª—ñ—î–Ω—Ç–∏
        top_customers = Customer.objects.order_by('-total_spent')[:5]
        
        # –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫
        avg_purchase = Purchase.objects.aggregate(Avg('amount'))['amount__avg'] or 0
        
        keyboard = [
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        analytics_text = (
            "üìà **–î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞**\n\n"
            "üìÖ **–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å:**\n"
            f"üë• –ù–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {monthly_customers}\n"
            f"üõí –ü–æ–∫—É–ø–æ–∫: {monthly_purchases}\n"
            f"üí∞ –î–æ—Ö—ñ–¥: {monthly_revenue:.2f} –≥—Ä–Ω\n\n"
            f"üìä **–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫:** {avg_purchase:.2f} –≥—Ä–Ω\n\n"
            "üèÜ **–¢–æ–ø-5 –∫–ª—ñ—î–Ω—Ç—ñ–≤:**\n"
        )
        
        for i, customer in enumerate(top_customers, 1):
            analytics_text += f"{i}. {customer.first_name} {customer.last_name} - {customer.total_spent:.2f} –≥—Ä–Ω\n"
        
        query.message.reply_text(analytics_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_clear_db":
        # –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        if not is_admin(query.from_user.id):
            query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏", callback_data="admin_clear_confirm")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        warning_text = (
            "‚ö†Ô∏è **–£–í–ê–ì–ê!**\n\n"
            "–í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è **–ü–û–í–ù–Ü–°–¢–Æ –û–ß–ò–°–¢–ò–¢–ò** –±–∞–∑—É –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!\n\n"
            "–¶–µ –¥—ñ—è **–ù–ï–ó–í–û–†–û–¢–ù–ê** —ñ –≤–∏–¥–∞–ª–∏—Ç—å:\n"
            "‚Ä¢ –í—Å—ñ—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤\n"
            "‚Ä¢ –í—Å—é —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫—É–ø–æ–∫\n"
            "‚Ä¢ –í—Å—ñ –∫–æ–¥–∏ –∑–Ω–∏–∂–æ–∫\n\n"
            "**–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?**"
        )
        
        query.message.reply_text(warning_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_clear_confirm":
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        if not is_admin(query.from_user.id):
            query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª—ñ DiscountCode
            from telegram_bot.models import DiscountCode
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
            customers_count = Customer.objects.count()
            purchases_count = Purchase.objects.count()
            codes_count = DiscountCode.objects.count()
            
            # –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            Purchase.objects.all().delete()
            DiscountCode.objects.all().delete()
            Customer.objects.all().delete()
            
            keyboard = [
                [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            success_text = (
                "‚úÖ **–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!**\n\n"
                "–í–∏–¥–∞–ª–µ–Ω–æ:\n"
                f"üë• –ö–ª—ñ—î–Ω—Ç—ñ–≤: {customers_count}\n"
                f"üõí –ü–æ–∫—É–ø–æ–∫: {purchases_count}\n"
                f"üé´ –ö–æ–¥—ñ–≤ –∑–Ω–∏–∂–æ–∫: {codes_count}\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ —á–∏—Å—Ç–æ—é –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö."
            )
            
            query.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            keyboard = [
                [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            error_text = (
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!**\n\n"
                f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {str(e)}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞."
            )
            
            query.message.reply_text(error_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_user_management":
        # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_search_user")],
            [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_all_users")],
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        management_text = (
            "üë§ **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏**\n\n"
            "üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –∑–Ω–∞–π—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —ñ–º'—è–º\n"
            "üìù –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ - –ø–µ—Ä–µ–≥–ª—è–¥ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        query.message.reply_text(management_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_search_user":
        # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        keyboard = [
            [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_user_management")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        search_text = (
            "üîç **–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX) –∞–±–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—à—É–∫—É:\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: +380501234567 –∞–±–æ –Ü–≤–∞–Ω"
        )
        
        query.message.reply_text(search_text, reply_markup=reply_markup, parse_mode='Markdown')
        context.user_data['admin_action'] = 'search_user'
    elif query.data == "admin_all_users":
        # –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
        page = context.user_data.get('users_page', 0)
        users_per_page = 5
        start_index = page * users_per_page
        end_index = start_index + users_per_page
        
        all_customers = Customer.objects.order_by('-registration_date')
        total_customers = all_customers.count()
        customers = all_customers[start_index:end_index]
        
        keyboard = []
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        for customer in customers:
            keyboard.append([InlineKeyboardButton(
                f"üë§ {customer.first_name} {customer.last_name or ''} ({customer.phone_number})",
                callback_data=f"admin_user_details_{customer.id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data="admin_users_prev"))
        if end_index < total_customers:
            nav_buttons.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data="admin_users_next"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.extend([
            [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_user_management")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        users_text = (
            f"üìù **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤** (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1})\n\n"
            f"–ü–æ–∫–∞–∑–∞–Ω–æ {start_index + 1}-{min(end_index, total_customers)} –∑ {total_customers} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π:"
        )
        
        query.message.reply_text(users_text, reply_markup=reply_markup, parse_mode='Markdown')
        context.user_data['users_page'] = page
    elif query.data == "admin_users_prev":
        # –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        current_page = context.user_data.get('users_page', 0)
        context.user_data['users_page'] = max(0, current_page - 1)
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ admin_all_users
        query.data = "admin_all_users"
        return handle_callback_query(update, context)
    elif query.data == "admin_users_next":
        # –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        current_page = context.user_data.get('users_page', 0)
        context.user_data['users_page'] = current_page + 1
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ admin_all_users
        query.data = "admin_all_users"
        return handle_callback_query(update, context)
    elif query.data.startswith("admin_user_details_"):
        # –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = int(query.data.split("_")[-1])
        try:
            customer = Customer.objects.get(id=user_id)
            level, discount = get_customer_level(customer.total_spent)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫
            purchases_count = Purchase.objects.filter(customer=customer).count()
            last_purchase = Purchase.objects.filter(customer=customer).order_by('-purchase_date').first()
            
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"admin_edit_user_{user_id}")],
                [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_delete_user_{user_id}")],
                [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_all_users")],
                [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_user_management")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            details_text = (
                f"üë§ **–î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
                f"üÜî ID: {customer.id}\n"
                f"üë§ –Ü–º'—è: {customer.first_name}\n"
                f"üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: {customer.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone_number}\n"
                f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {customer.total_spent:.2f} –≥—Ä–Ω\n"
                f"üíé –†—ñ–≤–µ–Ω—å: {level} ({discount}%)\n"
                f"üõí –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫: {purchases_count}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {customer.registration_date.strftime('%d.%m.%Y %H:%M')}\n"
            )
            
            if last_purchase:
                details_text += f"üõçÔ∏è –û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∞: {format_ukraine_time(last_purchase.purchase_date)} ({last_purchase.amount:.2f} –≥—Ä–Ω)\n"
            else:
                details_text += "üõçÔ∏è –ü–æ–∫—É–ø–æ–∫ —â–µ –Ω–µ –±—É–ª–æ\n"
            
            query.message.reply_text(details_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Customer.DoesNotExist:
            query.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    elif query.data.startswith("admin_edit_user_name_"):
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = int(query.data.split("_")[-1])
        try:
            customer = Customer.objects.get(id=user_id)
            
            keyboard = [
                [InlineKeyboardButton("üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"admin_user_details_{user_id}")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            edit_text = (
                f"‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ**\n\n"
                f"–ü–æ—Ç–æ—á–Ω–µ —ñ–º'—è: {customer.first_name}\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:"
            )
            
            query.message.reply_text(edit_text, reply_markup=reply_markup, parse_mode='Markdown')
            context.user_data['admin_action'] = 'edit_name'
            context.user_data['edit_user_id'] = user_id
        except Customer.DoesNotExist:
            query.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    elif query.data.startswith("admin_edit_user_lastname_"):
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–∑–≤–∏—â–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = int(query.data.split("_")[-1])
        try:
            customer = Customer.objects.get(id=user_id)
            
            keyboard = [
                [InlineKeyboardButton("üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"admin_user_details_{user_id}")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            edit_text = (
                f"‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–∑–≤–∏—â–∞**\n\n"
                f"–ü–æ—Ç–æ—á–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ: {customer.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø—Ä—ñ–∑–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è):"
            )
            
            query.message.reply_text(edit_text, reply_markup=reply_markup, parse_mode='Markdown')
            context.user_data['admin_action'] = 'edit_lastname'
            context.user_data['edit_user_id'] = user_id
        except Customer.DoesNotExist:
            query.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    elif query.data.startswith("admin_edit_user_phone_"):
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = int(query.data.split("_")[-1])
        try:
            customer = Customer.objects.get(id=user_id)
            
            keyboard = [
                [InlineKeyboardButton("üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"admin_user_details_{user_id}")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            edit_text = (
                f"‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É**\n\n"
                f"–ü–æ—Ç–æ—á–Ω–∏–π –Ω–æ–º–µ—Ä: {customer.phone_number}\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:"
            )
            
            query.message.reply_text(edit_text, reply_markup=reply_markup, parse_mode='Markdown')
            context.user_data['admin_action'] = 'edit_phone'
            context.user_data['edit_user_id'] = user_id
        except Customer.DoesNotExist:
            query.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    elif query.data.startswith("admin_edit_user_spent_"):
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –ø–æ–∫—É–ø–æ–∫
        user_id = int(query.data.split("_")[-1])
        try:
            customer = Customer.objects.get(id=user_id)
            
            keyboard = [
                [InlineKeyboardButton("üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"admin_user_details_{user_id}")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            edit_text = (
                f"‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –ø–æ–∫—É–ø–æ–∫**\n\n"
                f"–ü–æ—Ç–æ—á–Ω–∞ —Å—É–º–∞: {customer.total_spent:.2f} –≥—Ä–Ω\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –ø–æ–∫—É–ø–æ–∫ (—á–∏—Å–ª–æ):"
            )
            
            query.message.reply_text(edit_text, reply_markup=reply_markup, parse_mode='Markdown')
            context.user_data['admin_action'] = 'edit_spent'
            context.user_data['edit_user_id'] = user_id
        except Customer.DoesNotExist:
            query.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    elif query.data.startswith("admin_edit_user_"):
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = int(query.data.split("_")[-1])
        try:
            customer = Customer.objects.get(id=user_id)
            
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data=f"admin_edit_user_name_{user_id}")],
                [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ", callback_data=f"admin_edit_user_lastname_{user_id}")],
                [InlineKeyboardButton("üì± –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"admin_edit_user_phone_{user_id}")],
                [InlineKeyboardButton("üí∞ –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É –ø–æ–∫—É–ø–æ–∫", callback_data=f"admin_edit_user_spent_{user_id}")],
                [InlineKeyboardButton("üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"admin_user_details_{user_id}")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            edit_text = (
                f"‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
                f"üë§ {customer.first_name} {customer.last_name or ''}\n"
                f"üì± {customer.phone_number}\n"
                f"üí∞ {customer.total_spent:.2f} –≥—Ä–Ω\n\n"
                "–û–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:"
            )
            
            query.message.reply_text(edit_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Customer.DoesNotExist:
            query.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    elif query.data.startswith("admin_delete_user_"):
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = int(query.data.split("_")[-1])
        try:
            customer = Customer.objects.get(id=user_id)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_confirm_delete_{user_id}")],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"admin_user_details_{user_id}")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            delete_text = (
                f"üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
                f"‚ö†Ô∏è **–£–í–ê–ì–ê!** –í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—å –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
                f"üë§ {customer.first_name} {customer.last_name or ''}\n"
                f"üì± {customer.phone_number}\n"
                f"üí∞ {customer.total_spent:.2f} –≥—Ä–Ω\n\n"
                "‚ùó –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞! –í—Å—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ –ø–æ–∫—É–ø–∫–∏ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ.\n\n"
                "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?"
            )
            
            query.message.reply_text(delete_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Customer.DoesNotExist:
            query.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    elif query.data.startswith("admin_confirm_delete_"):
        # –û—Å—Ç–∞—Ç–æ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = int(query.data.split("_")[-1])
        try:
            customer = Customer.objects.get(id=user_id)
            customer_name = f"{customer.first_name} {customer.last_name or ''}"
            customer_phone = customer.phone_number
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ
            Purchase.objects.filter(customer=customer).delete()
            from telegram_bot.models import DiscountCode
            DiscountCode.objects.filter(customer=customer).delete()
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Å–∞–º–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            customer.delete()
            
            keyboard = [
                [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_all_users")],
                [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_user_management")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            success_text = (
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ**\n\n"
                f"üë§ {customer_name}\n"
                f"üì± {customer_phone}\n\n"
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–∞ –≤—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ —Å–∏—Å—Ç–µ–º–∏."
            )
            
            query.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Customer.DoesNotExist:
            query.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    elif query.data == "admin_settings":
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
        keyboard = [
            [InlineKeyboardButton("üíé –†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫", callback_data="admin_discount_levels")],
            [InlineKeyboardButton("‚è∞ –ß–∞—Å –¥—ñ—ó –∫–æ–¥—ñ–≤", callback_data="admin_code_expiry")],
            [InlineKeyboardButton("üìä –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞", callback_data="admin_min_amount")],
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        settings_text = (
            "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏**\n\n"
            "–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
            "üíé –†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫: Starter(1%), Regular(3%), Pro(5%), Elite(7%), VIP(10%)\n"
            "‚è∞ –ß–∞—Å –¥—ñ—ó –∫–æ–¥—ñ–≤: 30 —Ö–≤–∏–ª–∏–Ω\n"
            "üìä –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: 0 –≥—Ä–Ω\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:"
        )
        
        query.message.reply_text(settings_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_export":
        # –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
        import csv
        import io
        from datetime import datetime
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ CSV —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(['ID', '–Ü–º—è', '–ü—Ä—ñ–∑–≤–∏—â–µ', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞', '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó', '–†—ñ–≤–µ–Ω—å'])
        
        for customer in Customer.objects.all():
            level, discount = get_customer_level(customer.total_spent)
            writer.writerow([
                customer.id,
                customer.first_name,
                customer.last_name,
                customer.phone_number,
                customer.total_spent,
                customer.registration_date.strftime('%Y-%m-%d'),
                level
            ])
        
        keyboard = [
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        export_text = (
            "üì§ **–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö**\n\n"
            f"üìä –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {Customer.objects.count()} –∫–ª—ñ—î–Ω—Ç—ñ–≤\n"
            f"üìÖ –î–∞—Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
            "üìã –î–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
        csv_content = output.getvalue().encode('utf-8')
        context.bot.send_document(
            chat_id=query.message.chat_id,
            document=io.BytesIO(csv_content),
            filename=f"customers_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
            caption=export_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif query.data == "admin_broadcast":
        # –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        from datetime import timedelta
        from django.utils import timezone
        
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º", callback_data="broadcast_all")],
            [InlineKeyboardButton("üíé VIP –∫–ª—ñ—î–Ω—Ç–∞–º", callback_data="broadcast_vip")],
            [InlineKeyboardButton("üÜï –ù–æ–≤–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º", callback_data="broadcast_new")],
            [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        broadcast_text = (
            "üîî **–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å**\n\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {Customer.objects.count()}\n"
            f"üíé VIP –∫–ª—ñ—î–Ω—Ç—ñ–≤: {Customer.objects.filter(total_spent__gte=20000).count()}\n"
            f"üÜï –ù–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–∑–∞ —Ç–∏–∂–¥–µ–Ω—å): {Customer.objects.filter(registration_date__gte=timezone.now() - timedelta(days=7)).count()}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é:"
        )
        
        query.message.reply_text(broadcast_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "broadcast_all":
        # –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º
        customers = Customer.objects.all()
        keyboard = [
            [InlineKeyboardButton("üîî –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        broadcast_text = (
            "üì¢ **–†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º**\n\n"
            f"üë• –ë—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {customers.count()} –∫–ª—ñ—î–Ω—Ç–∞–º\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.\n"
            "–ó–∞—Ä–∞–∑ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ."
        )
        
        query.message.reply_text(broadcast_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "broadcast_vip":
        # –†–æ–∑—Å–∏–ª–∫–∞ VIP –∫–ª—ñ—î–Ω—Ç–∞–º
        vip_customers = Customer.objects.filter(total_spent__gte=20000)
        keyboard = [
            [InlineKeyboardButton("üîî –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        broadcast_text = (
            "üíé **–†–æ–∑—Å–∏–ª–∫–∞ VIP –∫–ª—ñ—î–Ω—Ç–∞–º**\n\n"
            f"üëë –ë—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {vip_customers.count()} VIP –∫–ª—ñ—î–Ω—Ç–∞–º\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.\n"
            "–ó–∞—Ä–∞–∑ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ VIP –∫–ª—ñ—î–Ω—Ç–∞–º–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ."
        )
        
        query.message.reply_text(broadcast_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "broadcast_new":
        # –†–æ–∑—Å–∏–ª–∫–∞ –Ω–æ–≤–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º
        from datetime import timedelta
        from django.utils import timezone
        
        new_customers = Customer.objects.filter(registration_date__gte=timezone.now() - timedelta(days=7))
        keyboard = [
            [InlineKeyboardButton("üîî –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        broadcast_text = (
            "üÜï **–†–æ–∑—Å–∏–ª–∫–∞ –Ω–æ–≤–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º**\n\n"
            f"üë∂ –ë—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {new_customers.count()} –Ω–æ–≤–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.\n"
            "–ó–∞—Ä–∞–∑ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–æ–≤–∏–º–∏ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ."
        )
        
        query.message.reply_text(broadcast_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_discount_levels":
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –∑–Ω–∏–∂–æ–∫
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        levels_text = (
            "üíé **–†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫**\n\n"
            "üìä –ü–æ—Ç–æ—á–Ω—ñ —Ä—ñ–≤–Ω—ñ:\n"
            "ü•â Starter: 0-999 –≥—Ä–Ω (1% –∑–Ω–∏–∂–∫–∞)\n"
            "ü•à Regular: 1000-4999 –≥—Ä–Ω (3% –∑–Ω–∏–∂–∫–∞)\n"
            "ü•á Pro: 5000-9999 –≥—Ä–Ω (5% –∑–Ω–∏–∂–∫–∞)\n"
            "üíé Elite: 10000-19999 –≥—Ä–Ω (7% –∑–Ω–∏–∂–∫–∞)\n"
            "üëë VIP: 20000+ –≥—Ä–Ω (10% –∑–Ω–∏–∂–∫–∞)\n\n"
            "‚ö†Ô∏è –ó–º—ñ–Ω–∞ —Ä—ñ–≤–Ω—ñ–≤ –∑–Ω–∏–∂–æ–∫ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ."
        )
        
        query.message.reply_text(levels_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_code_expiry":
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –¥—ñ—ó –∫–æ–¥—ñ–≤
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        expiry_text = (
            "‚è∞ **–ß–∞—Å –¥—ñ—ó –∫–æ–¥—ñ–≤**\n\n"
            "üìÖ –ü–æ—Ç–æ—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: 30 —Ö–≤–∏–ª–∏–Ω\n\n"
            "‚ÑπÔ∏è –ö–æ–¥–∏ –∑–Ω–∏–∂–æ–∫ –¥—ñ—é—Ç—å –ø—Ä–æ—Ç—è–≥–æ–º 30 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.\n"
            "–ü—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ü—å–æ–≥–æ —á–∞—Å—É –∫–æ–¥ —Å—Ç–∞—î –Ω–µ–¥—ñ–π—Å–Ω–∏–º.\n\n"
            "‚ö†Ô∏è –ó–º—ñ–Ω–∞ —á–∞—Å—É –¥—ñ—ó –∫–æ–¥—ñ–≤ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ."
        )
        
        query.message.reply_text(expiry_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_min_amount":
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        min_amount_text = (
            "üìä **–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞**\n\n"
            "üí∞ –ü–æ—Ç–æ—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: 0 –≥—Ä–Ω\n\n"
            "‚ÑπÔ∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏.\n"
            "–ó–∞—Ä–∞–∑ –∑–Ω–∏–∂–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –±—É–¥—å-—è–∫–æ—ó —Å—É–º–∏.\n\n"
            "‚ö†Ô∏è –ó–º—ñ–Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ."
        )
        
        query.message.reply_text(min_amount_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "admin_panel":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"), InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="admin_analytics")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤", callback_data="admin_customers"), InlineKeyboardButton("üé´ –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏", callback_data="admin_codes")],
            [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_user_management")],
            [InlineKeyboardButton("üí∞ –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏", callback_data="admin_purchases"), InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")],
            [InlineKeyboardButton("üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="admin_export"), InlineKeyboardButton("üîî –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É", callback_data="admin_clear_db")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        admin_text = (
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "üìä –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        query.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == "oneclick":
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —à–≤–∏–¥–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
        user = update.effective_user
        try:
            customer = Customer.objects.get(telegram_id=str(user.id))
            level, discount = get_customer_level(customer.total_spent)
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è –∫–∞—Å–∏—Ä–∞
            import random
            import string
            from datetime import timedelta
            from django.utils import timezone
            from telegram_bot.models import DiscountCode
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥
            while True:
                unique_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
                if not DiscountCode.objects.filter(code=unique_code).exists():
                    break
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–¥ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö (–¥—ñ—î 30 —Ö–≤–∏–ª–∏–Ω)
            expires_at = timezone.now() + timedelta(minutes=30)
            discount_code = DiscountCode.objects.create(
                code=unique_code,
                customer=customer,
                expires_at=expires_at
            )
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            query.message.reply_text(
                f"‚úÖ –í–∞—à –∫–æ–¥ –¥–ª—è –∫–∞—Å–∏—Ä–∞: **{unique_code}**\n\n"
                f"–ü–æ–∫–∞–∂—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –∫–∞—Å–∏—Ä—É –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∞—à–æ—ó –∑–Ω–∏–∂–∫–∏ {discount}%\n\n"
                f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∞—à–∞ –∑–Ω–∏–∂–∫–∞ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Customer.DoesNotExist:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            keyboard = [
                [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text(
                "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n"
                "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.",
                reply_markup=reply_markup
            )
    elif query.data == "discount":
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è –∑–Ω–∏–∂–∫–∞"
        user = update.effective_user
        try:
            customer = Customer.objects.get(telegram_id=str(user.id))
            level, discount = get_customer_level(customer.total_spent)
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.message.reply_text(
                f"üíé –í–∞—à —Ä—ñ–≤–µ–Ω—å: {level}\n"
                f"üí∞ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {discount}%\n"
                f"üõí –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {customer.total_spent} –≥—Ä–Ω",
                reply_markup=reply_markup
            )
        except Customer.DoesNotExist:
            keyboard = [
                [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text(
                "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n"
                "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.",
                reply_markup=reply_markup
            )
    elif query.data == "history":
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫"
        user = update.effective_user
        try:
            customer = Customer.objects.get(telegram_id=str(user.id))
            purchases = Purchase.objects.filter(customer=customer).order_by('-purchase_date')[:5]  # –û—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–∫—É–ø–æ–∫
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if purchases:
                message = "üìã **–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏:**\n\n"
                for i, purchase in enumerate(purchases, 1):
                    message += f"üßæ **–ü–æ–∫—É–ø–∫–∞ #{i}**\n"
                    message += f"üìÖ –î–∞—Ç–∞: {format_ukraine_time(purchase.purchase_date)}\n"
                    message += f"üí∞ –°—É–º–∞: {purchase.amount} –≥—Ä–Ω\n"
                    message += f"üéØ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞ –∑–Ω–∏–∂–∫–∞: {purchase.discount_applied}%\n"
                    
                    # –î–æ–¥–∞—î–º–æ —Ñ—ñ—Å–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —á–µ–∫—É, —è–∫—â–æ –≤—ñ–Ω —î
                    if purchase.fiscal_receipt_number:
                        message += f"üßæ –§—ñ—Å–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä: `{purchase.fiscal_receipt_number}`\n"
                    
                    # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –ø–æ–∫—É–ø–∫–∏
                    from loyalty.models import PurchaseItem
                    items = PurchaseItem.objects.filter(purchase=purchase)
                    if items:
                        message += "üõí **–¢–æ–≤–∞—Ä–∏:**\n"
                        for item in items:
                            message += f"  ‚Ä¢ {item.name} x{item.quantity} = {item.total_price} –≥—Ä–Ω\n"
                    
                    message += "\n"
                
                query.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                query.message.reply_text("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫.", reply_markup=reply_markup)
        except Customer.DoesNotExist:
            keyboard = [
                [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text(
                "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n"
                "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.",
                reply_markup=reply_markup
            )



def purchase_history(update: Update, context: CallbackContext):
    user = update.effective_user
    
    try:
        customer = Customer.objects.get(telegram_id=str(user.id))
        purchases = Purchase.objects.filter(customer=customer).order_by('-purchase_date')[:10]  # –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–∫—É–ø–æ–∫
        
        if purchases:
            message = "–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏:\n\n"
            for i, purchase in enumerate(purchases, 1):
                message += f"üßæ –ü–æ–∫—É–ø–∫–∞ #{i}\n"
                message += f"üìÖ –î–∞—Ç–∞: {format_ukraine_time(purchase.purchase_date)}\n"
                message += f"üí∞ –°—É–º–∞: {purchase.amount} –≥—Ä–Ω\n"
                message += f"üéØ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞ –∑–Ω–∏–∂–∫–∞: {purchase.discount_applied}%\n"
                
                # –î–æ–¥–∞—î–º–æ —Ñ—ñ—Å–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —á–µ–∫—É, —è–∫—â–æ –≤—ñ–Ω —î
                if purchase.fiscal_receipt_number:
                    message += f"üßæ –§—ñ—Å–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä: {purchase.fiscal_receipt_number}\n"
                
                # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –ø–æ–∫—É–ø–∫–∏
                from loyalty.models import PurchaseItem
                items = PurchaseItem.objects.filter(purchase=purchase)
                if items:
                    message += "üõí –¢–æ–≤–∞—Ä–∏:\n"
                    for item in items:
                        message += f"  ‚Ä¢ {item.name} x{item.quantity} = {item.total_price} –≥—Ä–Ω\n"
                
                message += "\n"
            
            update.message.reply_text(message)
        else:
            update.message.reply_text("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫.")
    except Customer.DoesNotExist:
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n"
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.",
            reply_markup=reply_markup
        )

def one_click_process(update: Update, context: CallbackContext):
    user = update.effective_user
    
    try:
        customer = Customer.objects.get(telegram_id=str(user.id))
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è –∫–∞—Å–∏—Ä–∞
        import random
        import string
        unique_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        
        update.message.reply_text(
            f"‚úÖ –í–∞—à –∫–æ–¥ –¥–ª—è –∫–∞—Å–∏—Ä–∞: {unique_code}\n\n"
            f"–ü–æ–∫–∞–∂—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –∫–∞—Å–∏—Ä—É –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∞—à–æ—ó –∑–Ω–∏–∂–∫–∏ {customer.current_discount}%\n\n"
            f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∞—à–∞ –∑–Ω–∏–∂–∫–∞ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞."
        )
    except Customer.DoesNotExist:
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n"
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.",
            reply_markup=reply_markup
        )

def admin_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    user = update.effective_user
    
    if not is_admin(user.id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤", callback_data="admin_customers")],
        [InlineKeyboardButton("üé´ –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏", callback_data="admin_codes")],
        [InlineKeyboardButton("üí∞ –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏", callback_data="admin_purchases")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É", callback_data="admin_clear_db")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    admin_text = (
        "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )
    
    update.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')

def help_command(update: Update, context: CallbackContext):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    keyboard = [
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    help_text = (
        "üìñ **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
        "üöÄ **–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏:**\n"
        "‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É\n"
        "‚Ä¢ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–æ–∫\n\n"
        "üíé **–†—ñ–≤–Ω—ñ –∑–Ω–∏–∂–æ–∫:**\n"
        "‚Ä¢ üîπ Starter (0-1999 –≥—Ä–Ω) - 1%\n"
        "‚Ä¢ üî∂ Regular (2000-4999 –≥—Ä–Ω) - 3%\n"
        "‚Ä¢ üî∂ Pro (5000-9999 –≥—Ä–Ω) - 5%\n"
        "‚Ä¢ üü° Elite (10000-19999 –≥—Ä–Ω) - 7%\n"
        "‚Ä¢ üíé VIP (20000+ –≥—Ä–Ω) - 10%\n\n"
        "üõí **–Ø–∫ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É:**\n"
        "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–®–≤–∏–¥–∫–∞ –ø–æ–∫—É–ø–∫–∞\"\n"
        "2. –ü–æ–∫–∞–∂—ñ—Ç—å –∫–æ–¥ –∫–∞—Å–∏—Ä—É\n"
        "3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –∑–Ω–∏–∂–∫—É!\n\n"
        "‚öôÔ∏è **–ö–æ–º–∞–Ω–¥–∏:**\n"
        "‚Ä¢ `/start` - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
        "‚Ä¢ `/help` - –¥–æ–≤—ñ–¥–∫–∞ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "‚Ä¢ `/discount` - –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –∑–Ω–∏–∂–∫–∏ —Ç–∞ —Ä—ñ–≤–Ω—è\n"
        "‚Ä¢ `/history` - —ñ—Å—Ç–æ—Ä—ñ—è –≤—Å—ñ—Ö –ø–æ–∫—É–ø–æ–∫\n"
        "‚Ä¢ `/oneclick` - —à–≤–∏–¥–∫–∞ –ø–æ–∫—É–ø–∫–∞ –∑ QR-–∫–æ–¥–æ–º\n"
        "‚Ä¢ `/skip` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫—Ä–æ–∫ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\n\n"
        "üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –∑—Ä—É—á–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó!"
    )
    
    update.message.reply_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def profile_settings(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    
    try:
        customer = Customer.objects.get(telegram_id=user_id)
        
        keyboard = [
            [InlineKeyboardButton("üì± –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="change_phone")],
            [InlineKeyboardButton("üë§ –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data="change_name")],
            [InlineKeyboardButton("üë§ –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ", callback_data="change_lastname")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            f"‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é**\n\n"
            f"**–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ:**\n"
            f"üë§ –Ü–º'—è: {customer.first_name}\n"
            f"üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: {customer.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {customer.phone_number}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Customer.DoesNotExist:
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", callback_data="register")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ—Ñ—ñ–ª—é —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è:",
            reply_markup=reply_markup
        )

def change_phone(update: Update, context: CallbackContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–º—ñ–Ω–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    
    try:
        customer = Customer.objects.get(telegram_id=user_id)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ handle_message
        context.user_data['profile_action'] = 'change_phone'
        context.user_data['customer_id'] = customer.id
        
        keyboard = [
            [KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
            [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        query.message.reply_text(
            f"üì± **–ó–º—ñ–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É**\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –Ω–æ–º–µ—Ä: {customer.phone_number}\n\n"
            f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Customer.DoesNotExist:
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )

def change_name(update: Update, context: CallbackContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    
    try:
        customer = Customer.objects.get(telegram_id=user_id)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ handle_message
        context.user_data['profile_action'] = 'change_name'
        context.user_data['customer_id'] = customer.id
        
        keyboard = [
            [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        query.message.reply_text(
            f"üë§ **–ó–º—ñ–Ω–∞ —ñ–º–µ–Ω—ñ**\n\n"
            f"–ü–æ—Ç–æ—á–Ω–µ —ñ–º'—è: {customer.first_name}\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Customer.DoesNotExist:
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )

def change_lastname(update: Update, context: CallbackContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–º—ñ–Ω–∏ –ø—Ä—ñ–∑–≤–∏—â–∞"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    
    try:
        customer = Customer.objects.get(telegram_id=user_id)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ handle_message
        context.user_data['profile_action'] = 'change_lastname'
        context.user_data['customer_id'] = customer.id
        
        keyboard = [
            [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        query.message.reply_text(
            f"üë§ **–ó–º—ñ–Ω–∞ –ø—Ä—ñ–∑–≤–∏—â–∞**\n\n"
            f"–ü–æ—Ç–æ—á–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ: {customer.last_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Customer.DoesNotExist:
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        
        query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )

def main():
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Updater –¥–ª—è –≤–µ—Ä—Å—ñ—ó 13.15
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("skip", skip_command))
    dispatcher.add_handler(CommandHandler("discount", my_discount))
    dispatcher.add_handler(CommandHandler("history", purchase_history))
    dispatcher.add_handler(CommandHandler("oneclick", one_click_process))
    dispatcher.add_handler(CommandHandler("admin", admin_command))
    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    dispatcher.add_handler(MessageHandler(Filters.contact, handle_message))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()