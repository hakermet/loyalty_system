import requests
import json
import os
import qrcode
from io import BytesIO
from django.conf import settings
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'loyalty_system.settings')
django.setup()

from loyalty.models import Customer, Purchase

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API Checkbox –∑ settings.py
CHECKBOX_API_URL = settings.CHECKBOX_API_URL
CHECKBOX_LOGIN = settings.CHECKBOX_LOGIN
CHECKBOX_PASSWORD = settings.CHECKBOX_PASSWORD
CHECKBOX_LICENSE_KEY = settings.CHECKBOX_LICENSE_KEY

class CheckboxAPI:
    def __init__(self):
        self.token = None
        self.login()
    
    def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤ API Checkbox - —Å–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏"""
        
        # –†—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        auth_methods = [
            {
                'name': 'PIN-–∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è',
                'url': f"{CHECKBOX_API_URL}/cashier/signinPinCode",
                'data': {"pin_code": CHECKBOX_PASSWORD}
            },
            {
                'name': '–õ–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è',
                'url': f"{CHECKBOX_API_URL}/cashier/signin",
                'data': {"login": CHECKBOX_LOGIN, "password": CHECKBOX_PASSWORD}
            },
            {
                'name': '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ PIN –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è',
                'url': f"{CHECKBOX_API_URL}/auth/signin",
                'data': {"pin_code": CHECKBOX_PASSWORD}
            },
            {
                'name': '–ë–∞–∑–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è',
                'url': f"{CHECKBOX_API_URL}/signin",
                'data': {"login": CHECKBOX_LOGIN, "password": CHECKBOX_PASSWORD}
            }
        ]
        
        base_headers = {
            "Content-Type": "application/json",
            "accept": "application/json",
            "X-License-Key": CHECKBOX_LICENSE_KEY,
            "X-Client-Name": "Loyalty-System",
            "X-Client-Version": "1.0.0"
        }
        
        for method in auth_methods:
            print(f"\nüîê –°–ü–†–û–ë–ê –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á: {method['name']}")
            print(f"   URL: {method['url']}")
            print(f"   Data: {method['data']}")
            print(f"   License Key: {CHECKBOX_LICENSE_KEY[:10]}...")
            
            try:
                response = requests.post(method['url'], json=method['data'], headers=base_headers, timeout=10)
                print(f"üìä RESPONSE STATUS: {response.status_code}")
                print(f"üìÑ RESPONSE HEADERS: {dict(response.headers)}")
                print(f"üìù RESPONSE BODY: {response.text}")
                
                if response.status_code == 200:
                    result = response.json()
                    self.token = result.get('access_token')
                    if self.token:
                        print(f"‚úÖ –£–°–ü–Ü–®–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ø: {method['name']}")
                        print(f"üîë Token –æ—Ç—Ä–∏–º–∞–Ω–æ")
                        return True
                    else:
                        print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                else:
                    print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á: Status {response.status_code}")
                    if response.status_code == 403:
                        print(f"üö´ FORBIDDEN: –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ credentials —Ç–∞ license key")
                    elif response.status_code == 401:
                        print(f"üîí UNAUTHORIZED: –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å")
                    elif response.status_code == 404:
                        print(f"üîç NOT FOUND: –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API URL")
                        
            except requests.exceptions.Timeout:
                print(f"‚è∞ TIMEOUT –¥–ª—è –º–µ—Ç–æ–¥—É {method['name']}")
                continue
            except requests.exceptions.ConnectionError:
                print(f"üåê CONNECTION ERROR –¥–ª—è –º–µ—Ç–æ–¥—É {method['name']}")
                continue
            except Exception as e:
                print(f"üí• –ü–û–ú–ò–õ–ö–ê –¥–ª—è –º–µ—Ç–æ–¥—É {method['name']}: {str(e)}")
                continue
        
        print(f"‚ùå –í–°–Ü –ú–ï–¢–û–î–ò –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á –ù–ï –°–ü–†–ê–¶–Æ–í–ê–õ–ò")
        return False
    
    def get_headers(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤"""
        return {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.token}"
        }
    
    def get_receipt(self, receipt_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–µ–∫ –∑–∞ –π–æ–≥–æ —Ñ—ñ—Å–∫–∞–ª—å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ Checkbox API"""
        print(f"üìã –ó–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö –¥–ª—è —á–µ–∫—É: {receipt_id}")
        
        if not self.token:
            print("üîê –ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±—É—î–º–æ —É–≤—ñ–π—Ç–∏...")
            if not self.login():
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è –≤ Checkbox API")
                return None
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–µ–∫—É
        methods = [
            f"{CHECKBOX_API_URL}/receipts/{receipt_id}",
            f"{CHECKBOX_API_URL}/cashier/receipts/{receipt_id}",
            f"{CHECKBOX_API_URL}/receipts/search?fiscal_number={receipt_id}",
            f"{CHECKBOX_API_URL}/cashier/receipts/search?fiscal_number={receipt_id}"
        ]
        
        headers = self.get_headers()
        
        for i, url in enumerate(methods, 1):
            try:
                print(f"üîç –ú–µ—Ç–æ–¥ {i}: {url}")
                response = requests.get(url, headers=headers, timeout=10)
                print(f"üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status_code}")
                print(f"üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}...")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ —á–µ–∫—É –º–µ—Ç–æ–¥–æ–º {i}")
                    
                    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    if isinstance(data, dict):
                        if 'results' in data and data['results']:
                            receipt = data['results'][0]
                        elif 'data' in data:
                            receipt = data['data']
                        else:
                            receipt = data
                    else:
                        receipt = data
                    
                    # –í–∏—Ç—è–≥—É—î–º–æ —Å—É–º—É –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–ª—ñ–≤
                    total_amount = (
                        receipt.get('total_sum') or 
                        receipt.get('total') or 
                        receipt.get('sum') or 
                        receipt.get('amount') or 
                        0
                    )
                    
                    return {
                        'id': receipt_id,
                        'total': float(total_amount) / 100 if total_amount > 1000 else float(total_amount),  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–ø—ñ–π–∫–∏ –≤ –≥—Ä–∏–≤–Ω—ñ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                        'created_at': receipt.get('created_at', '2024-01-01T12:00:00Z'),
                        'status': receipt.get('status', 'DONE'),
                        'raw_data': receipt
                    }
                    
                elif response.status_code == 401:
                    print("üîí –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤, —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è...")
                    if self.login():
                        headers = self.get_headers()
                        continue
                    else:
                        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è")
                        break
                        
            except requests.exceptions.Timeout:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–µ—Ç–æ–¥—É {i}")
                continue
            except requests.exceptions.ConnectionError:
                print(f"üåê –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è –º–µ—Ç–æ–¥—É {i}")
                continue
            except Exception as e:
                print(f"üí• –ü–æ–º–∏–ª–∫–∞ –¥–ª—è –º–µ—Ç–æ–¥—É {i}: {str(e)}")
                continue
        
        print("‚ùå –í—Å—ñ –º–µ—Ç–æ–¥–∏ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏, —á–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None
    
    def apply_discount(self, receipt_id, discount_percentage):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏ –¥–æ —á–µ–∫—É"""
        if not self.token:
            if not self.login():
                return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–µ–∫
        receipt = self.get_receipt(receipt_id)
        if not receipt:
            return False
        
        # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏ —á–µ—Ä–µ–∑ API Checkbox
        # –¶–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API Checkbox, —Ç–æ–º—É —Ü–µ –ø—Ä–∏–±–ª–∏–∑–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
        url = f"{CHECKBOX_API_URL}/receipts/{receipt_id}/discount"
        payload = {
            "discountType": "PERCENTAGE",
            "value": discount_percentage
        }
        
        response = requests.post(url, json=payload, headers=self.get_headers())
        return response.status_code == 200

def get_customer_level(total_spent):
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–æ—ó —Å—É–º–∏ –ø–æ–∫—É–ø–æ–∫"""
    if total_spent < 2000:
        return "Starter", 1  # –í—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏ —Ä—ñ–≤–Ω—è Starter –æ—Ç—Ä–∏–º—É—é—Ç—å 1% –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    elif total_spent < 5000:
        return "Regular", 3
    elif total_spent < 10000:
        return "Pro", 5
    elif total_spent < 20000:
        return "Elite", 7
    else:
        return "VIP", 10

def calculate_discount(amount):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–Ω–∏–∂–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—É–º–∏ –ø–æ–∫—É–ø–∫–∏ (–¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è)"""
    # –¢–µ–ø–µ—Ä –∑–Ω–∏–∂–∫–∞ –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—ñ–≤–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –±–æ–Ω—É—Å—ñ–≤
    return 0  # –ü–æ–∫–∏ —â–æ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–Ω–∏–∂–∫–∏ –∑–∞ –ø–æ–∫—É–ø–∫—É

def process_purchase(phone_number, receipt_id):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏"""
    print(f"üõí –û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}, —á–µ–∫: {receipt_id}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ API
    api = CheckboxAPI()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–µ–∫ —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π Checkbox API
    receipt_data = api.get_receipt(receipt_id)
    if not receipt_data:
        return {"success": False, "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–µ–∫ —á–µ—Ä–µ–∑ Checkbox API"}
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É –ø–æ–∫—É–ø–∫–∏
    amount = float(receipt_data.get('total', 0))
    print(f"üí∞ –°—É–º–∞ –ø–æ–∫—É–ø–∫–∏: {amount} –≥—Ä–Ω")
    
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
        customer = Customer.objects.get(phone_number=phone_number)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Ç–∞ –∑–Ω–∏–∂–∫—É –∫–ª—ñ—î–Ω—Ç–∞
        old_level, old_discount = get_customer_level(customer.total_spent)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∑–Ω–∏–∂–∫—É –∫–ª—ñ—î–Ω—Ç–∞
        current_discount = old_discount
        if current_discount > 0:
            api.apply_discount(receipt_id, current_discount)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –ø–æ–∫—É–ø–æ–∫ –∫–ª—ñ—î–Ω—Ç–∞
        customer.total_spent += amount
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å —Ç–∞ –∑–Ω–∏–∂–∫—É –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏
        new_level, new_discount = get_customer_level(customer.total_spent)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∏–∂–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è
        customer.current_discount = new_discount
        customer.save()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
        purchase = Purchase(
            customer=customer,
            amount=amount,
            discount_applied=current_discount,
            discount_earned=0,  # –¢–µ–ø–µ—Ä –∑–Ω–∏–∂–∫–∏ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –∑–∞ –ø–æ–∫—É–ø–∫—É
            receipt_id=receipt_id
        )
        purchase.save()
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        message = f"–ó–Ω–∏–∂–∫—É {current_discount}% –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ.\n"
        message += f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {new_level}\n"
        message += f"–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {new_discount}%\n"
        message += f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {customer.total_spent} –≥—Ä–Ω"
        
        if old_level != new_level:
            message += f"\nüéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –¥–æ—Å—è–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è: {new_level}!"
        
        return {
            "success": True,
            "message": message
        }
    
    except Customer.DoesNotExist:
        # –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –≥–µ–Ω–µ—Ä—É—î–º–æ QR-–∫–æ–¥ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(f"https://t.me/your_bot_username?start={receipt_id}")
        qr.make(fit=True)
        
        img = qrcode.make_image(fill_color="black", back_color="white")
        buffer = BytesIO()
        img.save(buffer, format="PNG")
        qr_code_base64 = buffer.getvalue()
        
        return {
            "success": False,
            "message": "–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ",
            "qr_code": qr_code_base64
        }